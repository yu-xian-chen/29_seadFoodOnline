/*============================================ *\
			目錄(使用名稱待統整)
\* ============================================*/
/* 效果
• ふわっ顯現 (不透明度轉換) 
• パタッ滑入 (XY位移)
•くるっ 翻轉
•ボンッ 放大
•ヒュッ 縮小
•じわっ 湧現 (blur)
•にゅーん 一方受限轉動進入
•枠線が伸びて 邊框線繪出 (相對、絕對定位)
•暗幕滑入後顯示
-----------------
•簡易切版 (wrapper、flex、box、bgextend、lineTrigger)
-----------------
•動畫設定 (次數、延遲秒數、持續時間)
/*使用的css名稱:(待統整)

\*============================================*/
/*======================= *\
	顯現 (不透明度轉換)
\* =======================*/ 
/* (卷軸未滑入)初始設定　*/
.fadeInTrigger,
.fadeUpTrigger,
.fadeDownTrigger,
.fadeLeftTrigger,
.fadeRightTrigger{
    opacity: 0;
}
/* 原地 */
.fadeIn{
	animation-name:fadeInAnime;
	animation-duration:1s;
	animation-fill-mode:forwards;
	opacity:0;
}

@keyframes fadeInAnime{
    from {opacity: 0;}
    to {opacity: 1;}
}

/* ↑ */

.fadeUp{
	animation-name:fadeUpAnime;
	animation-duration:0.5s;
	animation-fill-mode:forwards;
	opacity:0;
}

@keyframes fadeUpAnime{
  from {
	opacity: 0;
    transform: translateY(100px);
  }
  to {
    opacity: 1;
 	transform: translateY(0);
  }
}
 
/* ↓ */
.fadeDown{
	animation-name:fadeDownAnime;
	animation-duration:0.5s;
	animation-fill-mode:forwards;
	opacity:0;
}

@keyframes fadeDownAnime{
  from {
	opacity: 0;
    transform: translateY(-100px);
  }
  to {
    opacity: 1;
  	transform: translateY(0);
  }
}

/* → */
.fadeLeft{
animation-name:fadeLeftAnime;
animation-duration:0.5s;
animation-fill-mode:forwards;
opacity:0;
}

@keyframes fadeLeftAnime{
  from {
    opacity: 0;
  	transform: translateX(-100px);
  }
  to {
    opacity: 1;
  	transform: translateX(0);
  }
}

/*  ← */
.fadeRight{
animation-name:fadeRightAnime;
animation-duration:0.5s;
animation-fill-mode:forwards;
opacity:0;
}

@keyframes fadeRightAnime{
  from {
    opacity: 0;
  transform: translateX(100px);
  }

  to {
    opacity: 1;
  transform: translateX(0);
  }
}

/*======================= *\
	      パタッ滑入
\* =======================*/
 /* 初始設定  */
.flipDownTrigger,
.flipLeftTrigger,
.flipLeftTopTrigger,
.flipRightTrigger,
.flipRightTopTrigger{
    opacity: 0;
}
/* ↓ */
.flipDown{
	animation-name:flipDownAnime;
	animation-duration:1s;
	animation-fill-mode:forwards;
	opacity:0;
}

@keyframes flipDownAnime{
  from {
	/* perspective 與Z=0的距離 */
    transform: perspective(2500px) rotateX(100deg);
  	opacity: 0;
  }
  to {
    transform: perspective(2500px) rotateX(0);
  	opacity: 1;
  }
}

/*  ←  */
.flipLeft{
	animation-name:flipLeftAnime;
	animation-duration:1s;
	animation-fill-mode:forwards;
	perspective-origin:left center;
	opacity:0;
}

@keyframes flipLeftAnime{
  from {
	transform: perspective(600px) translate3d(0, 0, 0) rotateY(30deg);
	opacity: 0;
  }
  to {
	transform: perspective(600px) translate3d(0, 0, 0) rotateY(0deg);
	opacity: 1;
  }
}


/* ↖ */
.flipLeftTop{
	animation-name:flipLeftTopAnime;
	animation-duration:1s;
	animation-fill-mode:forwards;
	opacity:0;
}

@keyframes flipLeftTopAnime{
  from {
	transform: translate(-20px,80px) rotate(-15deg);
	opacity: 0;
  }
  to {
	transform: translate(0,0) rotate(0deg);
	opacity: 1;
  }
}

/* → */
.flipRight{
	animation-name:flipRightAnime;
	animation-duration:1s;
	animation-fill-mode:forwards;
	perspective-origin:right center;
	opacity:0;
}

@keyframes flipRightAnime{
  from {
   	transform: perspective(600px) translate3d(0, 0, 0) rotateY(-30deg);
   	opacity: 0;
  }
  to {
  	transform: perspective(600px) translate3d(0, 0, 0) rotateY(0deg);
  	opacity: 1;
  }
}

/* ↗ */
.flipRightTop{
	animation-name:flipRightTopAnime;
	animation-duration:1s;
	animation-fill-mode:forwards;
	opacity:0;
}

@keyframes flipRightTopAnime{
  from {
   transform: translate(-20px,80px) rotate(25deg);
   opacity: 0;
  }

  to {
   transform: translate(0,1) rotate(0deg);
   opacity: 1;
  }
}

/*======================= *\
		くるっ 翻轉
\* =======================*/ 
/* 初始設定 */
.rotateXTrigger,
.rotateYTrigger,
.rotateLeftZTrigger,
.rotateRightZTrigger{
    opacity: 0;
}

/* X 軸 直 */
.rotateX{
  animation-name:rotateXAnime;
  animation-duration:1s;
  animation-fill-mode:forwards;
}

@keyframes rotateXAnime{
  from{
    transform: rotateX(0);
    opacity: 0;
    }
  to{
    transform: rotateX(-360deg);
    opacity: 1;
    }
}

/*　Y軸 橫 */
.rotateY{
  animation-name:rotateYAnime;
  animation-duration:1s;
  animation-fill-mode:forwards;
}

@keyframes rotateYAnime{
  from{
    transform: rotateY(0);
    opacity: 0;
    }
  to{
    transform: rotateY(-360deg);
    opacity: 1;
    }
}

/* Z 軸左 */
.rotateLeftZ{
  	animation-name:rotateLeftZAnime;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
}

@keyframes rotateLeftZAnime{
  from{
    transform: rotateZ(0);
    opacity: 0;
    }
  to{
    transform: rotateZ(-360deg);
    opacity: 1;
    }
}

/*　Z 軸 右 */
.rotateRightZ{
  	animation-name:rotateRightZAnime;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
}

@keyframes rotateRightZAnime{
  from{
    transform: rotateZ(0);
    opacity: 0;
    }
  to{
    transform: rotateZ(360deg);
    opacity: 1;
    }
}


/*======================= *\
	放大、縮小
\* =======================*/ 
/* 初始設定 */
.zoomInTrigger,
.zoomOutTrigger{
    opacity: 0;
}
/* 放大 */
.zoomIn{
  	animation-name:zoomInAnime;
  	animation-duration:0.5s;
  	animation-fill-mode:forwards;
}

@keyframes zoomInAnime{
  from {
  	transform: scale(0.6);
  	opacity: 0;
  }

  to {
    transform: scale(1);
  	opacity: 1;
  }
}

/* 縮小 */
.zoomOut{
  	animation-name:zoomOutAnime;
  	animation-duration:0.5s;
  	animation-fill-mode:forwards;
}

@keyframes zoomOutAnime{
  from {
  	transform: scale(1.2);
  	opacity: 0;
  }

  to {
    transform:scale(1);
  	opacity: 1;
  }
}

/*======================= *\
	じわっ 湧現 (blur)
\* =======================*/ 
/* 初始設定 */
.blurTrigger{
    opacity: 0;
}
/* ぼかしから出現 */
.blur{
  	animation-name:blurAnime;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
}

@keyframes blurAnime{
  from {
  	filter: blur(10px);
  	transform: scale(1.02);
  	opacity: 0;
  }
  to {
  	filter: blur(0);
  	transform: scale(1);
  	opacity: 1;
  }
}


/*======================= *\
	一方受限轉動進入
\* =======================*/ 
/* 初始設定 */
.smoothTrigger{
    opacity: 0;
}
/* 滑らかに変形して出現 */
.smooth{
  	animation-name:smoothAnime;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
  	transform-origin: left;
  	opacity:0;
}

@keyframes smoothAnime{
  from {
  	transform: translate3d(0, 100%, 0) skewY(12deg);
  	opacity:0;
  }
  to {
  	transform: translate3d(0, 0, 0) skewY(0);
  	opacity:1;
  }
}

/*======================= *\
	邊框匯出(相對、絕對定位)
\* =======================*/ 
/* 初始設定 */
@keyframes lineAnimeBase{
	from {opacity:0;}
	to {opacity:1;}
}

.lineTrigger{
  	position: relative; /* 邊框匯出基準點*/
  	opacity:0;
}

.lineTrigger.lineanime{
  	animation-name:lineAnimeBase;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
}

/*上下線*/
.lineTrigger::before,
.lineTrigger::after{
  	position: absolute;
  	content:"";
  	width:0;
  	height:1px;
  	background:#333;/* 框色*/
}

/*左右線*/
.line2::before,
.line2::after{
  	position: absolute;
  	content:"";
  	width: 1px;
  	height:0;
  	background:#333;/* 框色*/
}

/*上線*/
.lineTrigger::before {
  	top:0;
  	left:0;
}

.lineTrigger.lineanime::before {
 	animation: lineAnime .5s linear 0s forwards;/*表示されて0秒後に上線が0.5秒かけて表示*/
}

/*右線*/
.line2::before{ 
  	top:0;
  	right:0;
}

.lineTrigger.lineanime .line2::before {
  	animation: lineAnime2 .5s linear .5s forwards;/*表示されて0.5秒後に右線が0.5秒かけて表示*/
}

/*下線*/
.lineTrigger::after { 
  	bottom:0;
  	right:0;
}

.lineTrigger.lineanime::after {
  	animation: lineAnime .5s linear 1s forwards;/*表示されて1秒後に下線が0.5秒かけて表示*/
}

/*左線*/
.line2::after{ 
  	bottom:0;
  	left:0;
}

.lineTrigger.lineanime .line2::after {
  	animation: lineAnime2 .5s linear 1.5s forwards;/*表示されて1.5秒後に左線が0.5秒かけて表示*/
}

@keyframes lineAnime {
  	0% {width:0%;}
    100%{width:100%;}
}

@keyframes lineAnime2 {
  	0% {height:0%;}
    100%{height:100%;}
}

/*枠線内側の要素*/

.lineTrigger.lineanime .lineinappear{
  animation: lineInnerAnime .5s linear 1.5s forwards;/*1.5秒後に中央のエリアが0.5秒かけて表示*/
  opacity: 0;/*初期値を透過0にする*/ 
}

@keyframes lineInnerAnime{
  0% {opacity:0;}
    100% {opacity:1;}
}


/*======================= *\
		暗幕滑入後顯示
\* =======================*/ 
/* 初始設定 */
.bgappearTrigger,
.bgUDextendTrigger,
.bgDUextendTrigger,
.bgRLextendTrigger,
.bgLRextendTrigger{
    opacity: 0;
}
/*背景色延伸（共通）*/
.bgextend{
  	animation-name:bgextendAnimeBase;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
  	position: relative;
  	overflow: hidden;/*　はみ出た色要素を隠す　*/
  	opacity:0;
}

@keyframes bgextendAnimeBase{
  	from {opacity:0;}
  	to {opacity:1;}
}

/*要素*/
.bgappear{
  	animation-name:bgextendAnimeSecond;
  	animation-duration:1s;
  	animation-delay: 0.6s;
  	animation-fill-mode:forwards;
  	opacity: 0;
}

@keyframes bgextendAnimeSecond{
  0% {opacity: 0;}
  100% {opacity: 1;}
}

/* → */
.bgLRextend::before{
  	animation-name:bgLRextendAnime;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #666;/*背景色*/
}
@keyframes bgLRextendAnime{
  0% {
    transform-origin:left;
    transform:scaleX(0);
  }
  50% {
    transform-origin:left;
    transform:scaleX(1);
  }
  50.001% {
    transform-origin:right;
  }
  100% {
    transform-origin:right;
    transform:scaleX(0);
  }
}

/* ← */
.bgRLextend::before{
  	animation-name:bgRLextendAnime;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #666;/*背景色*/
}
@keyframes bgRLextendAnime{
  0% {
    transform-origin:right;
    transform:scaleX(0);
  }
  50% {
    transform-origin:right;
    transform:scaleX(1);
  }
  50.001% {
    transform-origin:left;
  }
  100% {
    transform-origin:left;
    transform:scaleX(0);
  }
}

/* ↑ */
.bgDUextend::before{
  	animation-name:bgDUextendAnime;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #666; /*背景色*/
}
@keyframes bgDUextendAnime{
  0% {
    transform-origin:bottom;
    transform:scaleY(0);
  }
  50% {
    transform-origin:bottom;
    transform:scaleY(1);
  }
  50.001% {
    transform-origin:top;
  }
  100% {
    transform-origin:top;
    transform:scaleY(0);
  }
}

/* ↓ */
.bgUDextend::before{
  	animation-name:bgUDextendAnime;
  	animation-duration:1s;
  	animation-fill-mode:forwards;
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #666;/*背景色*/
}
@keyframes bgUDextendAnime{
  0% {
    transform-origin:top;
    transform:scaleY(0);
  }
  50% {
    transform-origin:top;
    transform:scaleY(1);
  }
  50.001% {
    transform-origin:bottom;
  }
  100% {
    transform-origin:bottom;
    transform:scaleY(0);
  }
}

/*======================= *\
		簡易切版
\* =======================*/ 
.wrapper{
  	overflow: hidden;
}
.flex{
  	display:flex;
  	flex-wrap: wrap;
}
.box{
  	width: 220px;
  	padding: 20px;
	margin: 0 20px 20px 20px;
  	background: #666;
  	color: #fff;
  	box-sizing:border-box;
}
.bgextend,
.lineTrigger{
  	width: 220px;
  	padding: 20px;
    margin: 0 20px 20px 20px;
  	box-sizing:border-box;
}

/*======================= *\
		動畫設定
\* =======================*/ 

/* 次數*/
.count2{  
  animation-iteration-count: 2;
}

.countinfinite{  
  animation-iteration-count: infinite;/*無限*/
}

/* 動畫延遲時間*/
.delay-time05{  
  animation-delay: 0.5s;
}

.delay-time1{  
  animation-delay: 1s;
}

.delay-time15{  
  animation-delay: 1.5s;
}

.delay-time2{  
  animation-delay: 2s;
}

.delay-time25{  
  animation-delay: 2.5s;
}

/* 動畫秒數設定*/
.change-time05{animation-duration: 0.5s;
}
.change-time1{  
  animation-duration: 1s;
}
.change-time15{  
  animation-duration: 1.5s;
}
.change-time2{  
  animation-duration: 2s;
}
.change-time25{  
  animation-duration: 2.5s;
}